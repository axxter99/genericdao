<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- create a SessionFactory bean from the data source and point it at our HBMs -->
	<bean id="testSessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="testDataSource" />
		<property name="mappingResources">
			<list>
				<value>hibernate/GenericTestObject.hbm.xml</value>
                <value>hibernate/GenericTestParentObject.hbm.xml</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop -->
				<prop key="hibernate.query.substitutions">true 1, false 0</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
			</props>
		</property>
	</bean>

	<!-- Create a transaction manager from the SessionFactory -->
	<bean id="testTransactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="dataSource" ref="testDataSource" />
		<property name="sessionFactory" ref="testSessionFactory" />
	</bean>

	<!-- The above beans are needed for ANY hibernate using app,
            (along with the stuff in spring-common.xml)
		The beans below are for the DAO and maybe other beans -->


	<!-- Example 1: Using multiple beans to create the DAO -->

	<!-- create the list of persistent classes handled by this DAO -->
	<bean id="org.sakaiproject.genericdao.test.PersistentClasses"
		class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<value>org.sakaiproject.genericdao.test.GenericTestObject</value>
                <value>org.sakaiproject.genericdao.test.GenericTestParentObject</value>
			</list>
		</constructor-arg>
	</bean>

	<!-- create the DAO itself but as a target -->
	<bean id="org.sakaiproject.genericdao.test.GenericDaoTarget"
		class="org.sakaiproject.genericdao.hibernate.HibernateGenericDao">
		<property name="sessionFactory" ref="testSessionFactory" />
		<property name="persistentClasses" 
			ref="org.sakaiproject.genericdao.test.PersistentClasses" />
        <property name="interceptor" ref="org.sakaiproject.genericdao.interceptors.TestInterceptor" />
	</bean>

	<!-- put the DAO in a transaction proxy -->
	<bean id="org.sakaiproject.genericdao.dao.GenericDao"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="testTransactionManager" />
		<property name="target"
			ref="org.sakaiproject.genericdao.test.GenericDaoTarget" />
		<property name="transactionAttributes">
			<props>
				<!-- +java.lang.RuntimeException tells spring to exempt RuntimeExceptions 
					from rolling back the transaction -->
                <prop key="*">PROPAGATION_REQUIRED,+java.lang.RuntimeException</prop>
			</props>
		</property>
	</bean>


	<!-- Example 2: Using 2 beans to create the DAO -->

	<!-- create the DAO itself but as a target -->
	<bean id="org.sakaiproject.genericdao.test.BasicGenericDaoTarget"
		class="org.sakaiproject.genericdao.hibernate.HibernateBasicGenericDao">
		<property name="sessionFactory" ref="testSessionFactory" />
		<property name="persistentClasses">
			<list>
				<value>org.sakaiproject.genericdao.test.GenericTestObject</value>
                <value>org.sakaiproject.genericdao.test.GenericTestParentObject</value>
			</list>
		</property>
        <property name="interceptor" ref="org.sakaiproject.genericdao.interceptors.TestInterceptor" />
	</bean>

	<!-- put the DAO in a transaction proxy -->
	<bean id="org.sakaiproject.genericdao.dao.BasicGenericDao"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="testTransactionManager" />
		<property name="target"
			ref="org.sakaiproject.genericdao.test.BasicGenericDaoTarget" />
		<property name="transactionAttributes">
			<props>
				<!-- +java.lang.RuntimeException tells spring to exempt RuntimeExceptions 
					from rolling back the transaction -->
                <prop key="*">PROPAGATION_REQUIRED,+java.lang.RuntimeException</prop>
			</props>
		</property>
	</bean>


	<!-- Example 3: All in one bean to create the DAO and protect it transactionally
		and define the list of persistent classes -->
    <bean id="org.sakaiproject.genericdao.dao.GeneralGenericDao"
            class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="testTransactionManager" />
        <property name="transactionAttributes">
            <props>
                <!-- +java.lang.RuntimeException tells spring to exempt RuntimeExceptions 
                    from rolling back the transaction -->
                <prop key="*">PROPAGATION_REQUIRED,+java.lang.RuntimeException</prop>
            </props>
        </property>
        <property name="target">
            <bean class="org.sakaiproject.genericdao.hibernate.HibernateGeneralGenericDao">
                <property name="sessionFactory" ref="testSessionFactory" />
                <property name="persistentClasses">
                    <list>
                        <value>org.sakaiproject.genericdao.test.GenericTestObject</value>
                        <value>org.sakaiproject.genericdao.test.GenericTestParentObject</value>
                    </list>
                </property>
                <property name="interceptor" ref="org.sakaiproject.genericdao.interceptors.TestInterceptor" />
            </bean>
        </property>
    </bean>

    <!-- testing deprecated complete Generic DAO -->
	<bean id="org.sakaiproject.genericdao.dao.CompleteGenericDao"
			class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="testTransactionManager" />
		<property name="transactionAttributes">
			<props>
				<!-- +java.lang.RuntimeException tells spring to exempt RuntimeExceptions 
					from rolling back the transaction -->
                <prop key="*">PROPAGATION_REQUIRED,+java.lang.RuntimeException</prop>
			</props>
		</property>
		<property name="target">
			<bean class="org.sakaiproject.genericdao.hibernate.HibernateCompleteGenericDao">
				<property name="sessionFactory" ref="testSessionFactory" />
				<property name="persistentClasses">
					<list>
						<value>org.sakaiproject.genericdao.test.GenericTestObject</value>
                        <value>org.sakaiproject.genericdao.test.GenericTestParentObject</value>
					</list>
				</property>
                <property name="interceptor" ref="org.sakaiproject.genericdao.interceptors.TestInterceptor" />
			</bean>
		</property>
	</bean>


</beans>